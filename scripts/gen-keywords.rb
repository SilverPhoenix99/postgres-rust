
require 'pathname'
require 'set'

class KeywordsGenerator

  CATEGORIES = {
    'UNRESERVED_KEYWORD' => 'Unreserved',
    'COL_NAME_KEYWORD' => 'ColumnName',
    'TYPE_FUNC_NAME_KEYWORD' => 'TypeFuncName',
    'RESERVED_KEYWORD' => 'Reserved',
  }

  # Keywords that clash with Rust classes.
  # These will have a 'Kw' suffix.
  CLASHES = %w[
    Copy
    Default
    Drop
    Error
    Location
    None
    Option
    Owned
    Parser
    Range
    Ref
    Some
    Stdin
    Stdout
    String
    System
  ].to_set

  def self.run!(input, output)
    new(input, output).run!
  end

  def initialize(input, output)
    @input = Pathname(input)
    @output = Pathname(output)
  end

  def run!
    rendered = render
    @output.write(rendered)
  end

  def render
    enum = render_keyword_enum
    map = render_keywords_map
    kw_details = render_keyword_details
    [
      "// Automatically generated by #{File.basename(__FILE__)} at #{Time.now.utc}\n",
      *enum,
      '',
      *map,
      '',
      *kw_details,
      '',
      'use super::KeywordCategory::*;',
      'use super::KeywordDetails;',
      'use unicase::UniCase;',
      'use Keyword::*;',
      ''
    ].join("\n")
  end

  def render_keyword_enum

    kws = keywords.map do |kw|
      "    #{kw[:keyword]},"
    end

    [
      '#[derive(Debug, Clone, Copy, Eq, PartialEq)]',
      "pub enum Keyword {",
      *kws,
      '}'
    ]
  end

  def render_keywords_map

    kws = keywords.map do |kw|
      text = kw[:text].inspect
      category = kw[:category]
      keyword = kw[:keyword]
      bare = kw[:bare]
      "    UniCase::ascii(#{text}) => #{keyword},"
    end

    [
      "pub(super) static KEYWORDS: phf::Map<UniCase<&'static str>, Keyword> = phf::phf_map! {",
      *kws,
      '};'
    ]
  end

  def render_keyword_details

    kw_details = keywords.map do |kw|
      text = kw[:text].inspect
      category = kw[:category]
      keyword = kw[:keyword]
      bare = kw[:bare]
      "    KeywordDetails::new(#{keyword}, #{text}, #{category}, #{bare}),"
    end

    [
      "pub(super) static KEYWORD_DETAILS: [KeywordDetails; #{keywords.length}] = [",
      *kw_details,
      '];'
    ]
  end

  def keywords
    @keywords ||= read_file
      .filter_map { |line| line.match(/^PG_KEYWORD\(\K([^)]+)/) }
      .map do |match|
        text, keyword, category, bare = match[0].split(/\s*,\s*/)
        keyword = keyword.sub(/_P$/, '').split('_').map(&:capitalize).join
        keyword += 'Kw' if CLASHES.include?(keyword)
        {
          text: text[1..-2], # remove quotes
          keyword:,
          category: CATEGORIES[category],
          bare: bare == 'BARE_LABEL'
        }
      end

  end

  def read_file
    @lines ||= @input.readlines
  end

end

KeywordsGenerator.run!($ARGV[0], $ARGV[1]) if __FILE__ == $PROGRAM_NAME
