
require 'pathname'
require_relative 'minimal_perfect_hash'

class ErrCodesGenerator

  class ErrCode

    attr_reader :sqlstate,
                :category,
                :name,
                :spec_name,
                :repr

    attr_accessor :slot

    def initialize(sqlstate:, category:, macro_name:, spec_name:)
      @sqlstate = sqlstate
      @spec_name = spec_name

      name = macro_name[8..-1] # remove 'ERRCODE_'
      @name = name.downcase.gsub(/(?:^|_)(.)/) { |m| m[-1].upcase }

      @category = case category
        when 'E' then :Error
        when 'W' then :Warning
        else :Success
      end

      @repr = sqlstate.bytes
        .map { |b| b - '0'.ord }
        .reduce { |acc, b| (acc << 6) | b }
    end

    def success? = @category == :Success
  end

  def self.run!(input, output)
    new(input, output).run!
  end

  def initialize(input, output)
    @input = Pathname(input)
    @output = Pathname(output)
  end

  def run!
    init_codes_hash
    rendered = render
    @output.binwrite(rendered)
  end

  def init_codes_hash
    return if @table

    @codes = errcodes.values.flatten
      .reject { |code| code.success? || aliases.dig(code.sqlstate, code.name) }
      .to_h { |code| [code.repr, code] }

    @table = MinimalPerfectHash.generate!(@codes.keys)

    nil
  end

  def render
    [
      "// Automatically generated by #{File.basename(__FILE__)} at #{Time.now.utc}",
      '//',
      '// DO NOT EDIT MANUALLY !!!',
      '//',
      '',
      *render_enum,
      '',
      'pub(super) static MAP: mphf::Map<u32, ()> = mphf::Map::new(&SALTS, &ENTRIES);',
      '',
      *render_variants_array,
      '',
      *render_salts,
      '',
      'use crate::mphf;',
      '',
    ].join("\n")
  end

  def render_enum
    variants = errcodes.flat_map do |section, codes|

      section = "/* #{section} */"

      codes = codes
        .reject { |code| aliases.dig(code.sqlstate, code.name) }
        .flat_map do |code|

          akas = if aliases.dig(code.sqlstate, :base_code) == code.name
            aliases[code.sqlstate]
              .keys
              .reject { |k| k == :base_code }
              .map { |a| "/// Alias: `#{a}`<p/>" }
          end

          repr = code.repr.to_s(16)

          [
            *akas,
            "/** SQLSTATE: `#{code.sqlstate}` */ #{code.name} = 0x#{repr},"
          ]
        end

      [section, *codes].map { |line| "    #{line}" }.prepend('')
    end

    lines = [
      '#[repr(u32)]',
      '#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]',
      "pub enum SqlState {",
      *variants,
      '}'
    ]

    lines.join("\n")
  end

  def render_variants_array

    variants = @table.slots
      .map do |code, slot|
        @codes[code].tap { |c| c.slot = slot }
      end
      .sort_by(&:slot)
      .map do |code|
        repr = '%08x' % code.repr
        "    (0x#{repr}, ()), // #{code.sqlstate} #{code.name}"
      end

    [
      "static ENTRIES: [(u32, ()); #{variants.size}] = [",
      *variants,
      '];'
    ]
  end

  def render_salts

    values = @table.salts.each_slice(16)
      .map do |slice|
        slice = slice.map { |i| '%4s' % i }.join(', ')
        "    #{slice},"
      end

    [
      "static SALTS: [i16; #{@table.salts.size}] = [",
      *values,
      '];'
    ]
  end

  def aliases
    @aliases ||= errcodes.values.flatten
      .group_by(&:sqlstate)
      .select { |_, codes| codes.count > 1 }
      .transform_values do |codes|
        codes.each_with_object({}) do |code, h|
          if code.spec_name.nil?
            h[code.name] = :alias
          else
            h[:base_code] = code.name
          end
        end
      end
  end

  def errcodes
    @errcodes ||= lines
      .chunk_while { |_, after| !after.match(/^\s*Section:/) }
      .each_with_object({}) do |(section, *codes), h|
        h[section] = codes.map(&:split)
          .map do |sqlstate, category, macro_name, spec_name|
            ErrCode.new(sqlstate:, category:, macro_name:, spec_name:)
          end
      end
  end

  def lines
    @lines ||= @input.readlines.tap do |f|
      f.reject! { |line| line.match?(/^\s*(#|$)/) }
    end.map!(&:chomp!);
  end

end

ErrCodesGenerator.run!($ARGV[0], $ARGV[1]) if __FILE__ == $PROGRAM_NAME
